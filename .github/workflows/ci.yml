name: Aegisub CI

on: [ workflow_dispatch ]

jobs:
    build:
        name: ${{ matrix.config.name }}
        runs-on: ${{ matrix.config.os }}

        strategy:
            fail-fast: false
            matrix:
                config:
                    -   name: Windows MSVC Release
                        os: windows-latest
                        msvc: true
                        buildtype: release
                        args: >-
                            -Ddefault_library=static
                            --force-fallback-for=zlib,harfbuzz,freetype2,fribidi,libpng
                            -Dfreetype2:harfbuzz=disabled
                            -Dharfbuzz:freetype=disabled
                            -Dharfbuzz:cairo=disabled
                            -Dharfbuzz:glib=disabled
                            -Dharfbuzz:gobject=disabled
                            -Dharfbuzz:tests=disabled
                            -Dharfbuzz:docs=disabled
                            -Dharfbuzz:icu=disabled
                            -Dfribidi:tests=false
                            -Dfribidi:docs=false
                            -Dlibass:fontconfig=disabled
                            -Davisynth=enabled
                            -Dbestsource=enabled
                            -Dvapoursynth=enabled
        steps:
            -   name: set current date
                id: set_date
                run: |
                    date=$(date +'%Y-%m')
                    echo "date=$date" >> $GITHUB_OUTPUT
                shell: bash

            -   name: cache Aegisub build
                uses: actions/cache@v4
                with:
                    path: D:/a/Aegisub/Aegisub/build
                    key: Aegisub-build-${{ steps.set_date.outputs.date }}
                    restore-keys: Aegisub-build-
            -   uses: actions/checkout@v4
                with:
                    fetch-depth: '0'

            -   uses: actions/setup-python@v5
                with:
                    python-version: '3.x'

            -   name: Setup Meson
                run: |
                    python -m pip install --upgrade pip setuptools
                    pip install meson

            -   name: Setup MSVC
                if: matrix.config.os == 'windows-latest' && matrix.config.msvc == true
                uses: ilammy/msvc-dev-cmd@v1

            -   name: Install dependencies (Windows)
                if: matrix.config.os == 'windows-latest'
                run: |
                    choco install ninja innosetup
                    
                    $moonscripturl = "https://github.com/leafo/moonscript/releases/download/win32-v0.5.0/moonscript-187bac54ee5a7450013e9c38e005a0e671b76f45.zip"
                    mkdir moonscript
                    Invoke-WebRequest -Uri $moonscripturl -OutFile ".\moonscript\moonscript.zip"
                    pushd moonscript
                    7z e moonscript.zip
                    Get-Location | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                    popd
                    
                    $gettexturl = "https://github.com/mlocati/gettext-iconv-windows/releases/download/v0.21-v1.16/gettext0.21-iconv1.16-static-64.zip"
                    Invoke-WebRequest -Uri $gettexturl -OutFile ".\gettext.zip"
                    Expand-Archive ".\gettext.zip" -DestinationPath gettext
                    pushd gettext/bin
                    Get-Location | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
                    popd

            -   name: Configure
                run: |
                    meson setup build ${{ matrix.config.args }} -Dbuildtype=${{ matrix.config.buildtype }}
                    meson configure build

            -   name: Build
                run: meson compile -C build -j(Get-WmiObject -Class Win32_Processor).NumberOfLogicalProcessors

#            -   name: Run test
#                run: meson test -C build --verbose "gtest main"

            # Windows artifacts
            -   name: Generate Windows installer
                if: matrix.config.os == 'windows-latest'
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run:
                    meson compile win-installer -C build -j(Get-WmiObject -Class Win32_Processor).NumberOfLogicalProcessors

            -   name: Generate Windows portable
                if: matrix.config.os == 'windows-latest'
                run: meson compile win-portable -C build -j(Get-WmiObject -Class Win32_Processor).NumberOfLogicalProcessors

            -   name: Upload artifacts - win_installer
                uses: actions/upload-artifact@v4
                if: matrix.config.os == 'windows-latest'
                with:
                    name: ${{ matrix.config.name }} - installer
                    path: build/Aegisub-*.exe
                    if-no-files-found: error

            -   name: Upload artifacts - portable.zip
                uses: actions/upload-artifact@v4
                if: matrix.config.os == 'windows-latest'
                with:
                    name: ${{ matrix.config.name }} - portable
                    path: build/aegisub-portable-64.zip
